package org.bimserver.pb;

/******************************************************************************
 * Copyright (C) 2009-2016  BIMserver.org
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see {@literal<http://www.gnu.org/licenses/>}.
 *****************************************************************************/
import "ServiceInterface.proto";
import "AdminInterface.proto";
import "MetaInterface.proto";
import "SettingsInterface.proto";
import "AuthInterface.proto";
import "PluginInterface.proto";
import "NotificationInterface.proto";
import "RemoteServiceInterface.proto";
import "LowLevelInterface.proto";
import "NotificationRegistryInterface.proto";
option java_generic_services = true;

option java_outer_classname = "OAuthInterfaceImpl";

option optimize_for = SPEED;

service OAuthInterface {
	rpc generateForwardUrl (GenerateForwardUrlRequest) returns (GenerateForwardUrlResponse);

	rpc listRegisteredServers (ListRegisteredServersRequest) returns (ListRegisteredServersResponse);

	rpc registerApplication (RegisterApplicationRequest) returns (RegisterApplicationResponse);

	rpc setAuthorizationCode (SetAuthorizationCodeRequest) returns (VoidResponse);

}

message GenerateForwardUrlRequest {
	optional string registrationEndpoint = 1;
	optional string authorizeUrl = 2;
	optional string returnUrl = 3;
}

message GenerateForwardUrlResponse {
	optional string errorMessage = 1;
	optional string value = 2;
}

message ListRegisteredServersRequest {
}

message SOAuthServer {
	optional string apiUrl = 1;
	optional string clientId = 2;
	optional string clientSecret = 3;
	optional int64 expiresIn = 4;
	optional string issuedAt = 5;
	optional int64 oid = 6;
	optional string registrationEndpoint = 7;
	optional string registrationUrl = 8;
	optional int32 rid = 9;
}

message ListRegisteredServersResponse {
	optional string errorMessage = 1;
	repeated SOAuthServer value = 2;
}

message RegisterApplicationRequest {
	optional string registrationEndpoint = 1;
	optional string apiUrl = 2;
}

message RegisterApplicationResponse {
	optional string errorMessage = 1;
	optional int64 value = 2;
}

message SetAuthorizationCodeRequest {
	optional int64 applicationId = 1;
	optional string code = 2;
}

